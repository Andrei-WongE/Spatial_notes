---
title: "OSM_Notes"
author: "[Andrei Wong](https://github.com/Andrei-WongE)"
date: "`r Sys.Date()`"
#Required to publish html
project:
  type: website
  output-dir: docs
#Additionally, put/touch .nojekyll/ in the console
format:
  html:
# Add table of contents
    toc: true
    toc_float: true
# css selectors to change the header and TOC styles
    css: headers.css
    number-sections: true
    smooth-scroll: true
    link-external-icon: false
    link-external-newwindow: true
    theme: lux
    highlight: tango
# Fold code (initially hidden)
    code-fold: true
# Allow to download code
    code_download: true
# Tables printed as HTML tables with support for pagination
    df_print: paged
# Text for footer
    include-after-body: footer.html
# Places footnotes and cited sources in the margin
# other layout options (for example placing a 
# figure in the margin) will be set on per element
# using cap-location margin
reference-location: margin
# Allow for highlighting text. \hl{highlight} text inline.Or \hl{\textbf{highlight}} with bold face.
# Allows fort commenting using hypothesis
comments:
  hypothesis: true
---

# Set-up

```{r}
#| echo: false
knitted_when <- format(Sys.Date())
knitted_where <- knitr::current_input()
knitted_with <- packageVersion("knitr")
knitted_doc_url <- downlit::autolink_url("knitr::knit()")
```

Note prepared on `r knitted_when` from `r knitted_where` with knitr version `r knitted_with`.

General set-up of the program.

```{r Set-up}
#|  label: set-up
#|  include: false

# Install and/or load packages

if (!require("pacman")) {
install.packages("pacman")
}
pacman::p_load(tidyverse 
               ,tidylog
               ,Cairo
               ,here
               ,dplyr 
               ,ggplot2
               ,ggnewscale # For multiple fill and colour scales in ggplot2
               ,ggsn       # North Symbols and Scale Bars for Maps
               ,osmdata    # For downloading and using data from OSM
               ,sf
               ,rvest      # For Web scrapping
               ,DT         # R interface to the JavaScript library DataTables
               ,downlit    # For syntax highlighting and automatic linking
               ,git2r      # Provides access to 'Git' repositories
               ,xfun       # For alternative Session Info
               )

pacman::p_update()         # Update out-of-date packages

# General options
    
  options(scipen = 100, digits = 2) # Prefer non-scientific notation
  
  knitr::opts_chunk$set( dev       = "CairoPNG" #alpha transparency in png
                        ,fig.path  = "Figs/"
                        ,dpi       = 600
                        ,fig.width = 12
                        ,fig.hight = 9
  #suppress any R warnings or messages in the final document
                        ,warning   = FALSE 
                        ,message   = FALSE
  # Automatically formatting code using styler
                        ,tidy      = "styler"
)
  

```

# Obtaining data

```{r data}
#| label: data
#| cache: true
#| code-fold: show


Lima <-
   getbb("Lima Metropolitana") %>%     # obtaining boundaries
   opq(timeout = 25*100) %>%           # overpass query
   add_osm_feature(                    # retrieve administrative boundaries
     key = "admin_level"
    ,value = "5"                       # boundary box at the regional level
  ) %>%
  osmdata_sf()                         # import as an sf object

```

# Obtaining boundaries

```{r boudnaries}
#| label: boundaries
#| cache: true
#| code-fold: show

Lima_multipolygons <- Lima %>%                     
  osm_multipolygons(.$osm_polygons$osm_id) %>%  # extracting polygons
  dplyr::filter(name == "Lima Metropolitana") %>% # only at specific city level
  dplyr::select(geometry) %>%          # select polygon geometry information
  st_transform(24892)                  # convert the GIS coordinates to CRS

Lima_multipolygons
```

See [OPQ](https://wiki.openstreetmap.org/wiki/Overpass_API#Resource_management_options_.28osm-script.29) for explanation of timeout and memsize (or maxsize in overpass terms). See [nominatim](https://nominatim.openstreetmap.org/ui/details.html?osmtype=N&osmid=4289361265&class=place) for **admin_level** keys.


```{r tbl-osm-features}
#| label: tbl-osm-features
#| tbl-cap: "OSM features table"
#| warning: false
#| code-fold: show

page <- read_html("https://wiki.openstreetmap.org/wiki/Map_features")

features_list <- html_nodes(page,  css = ".toctext") |> 
  html_text2() |> 
  as.data.frame() |> 
  rename(feature = starts_with("html"))

datatable(features_list,
  options = list(
    searchHighlight = TRUE
    ,dom = "ltipr"            # Deactivate search box
    )
  ,filter = "top"             # Deactivate search box
  ,selection = "multiple",    # Deactivate search box
  ,escape = FALSE             # Deactivate search box
  ,width = "300px"
)
```

In order to select [Features](https://wiki.openstreetmap.org/wiki/Map_Features) there is a list available with `r nrow(features_list)` features, as shown in @tbl-osm-features. We can also use the available_features( ) function that returns a list of available OSM features that have different tags.

If we look to the internal structure of the resulting object, we obtain:

```{r sf-object-structure}
#| label: sf-object-structure
#| echo: false
str(Lima)
```

```{r first-plot}
#| label: first-plot
#| fig-cap: "First general plot of the city."
#| cap-location: margin
#| echo: false
#| code-fold: show


ggplot(Lima_multipolygons, fill = NA) +
  geom_sf() +
  ggsn::blank()

```

<!-- ![First plot.](r`knitr::fig_chunk('Figs/first-plot','png')`) -->

# Adding data: Streets, buildings, and XXX

```{r first-plot-roads}
#| label: adding-data-roads
#| cache: true
#| code-fold: show


roads <-
 getbb("Lima Metropolitana ") %>% 
 opq(timeout = 25*100) %>%
 add_osm_feature(                   # requesting features related to highway
     key = "highway" 
    ,value = c(
       "trunk"
      ,"primary"
      ,"secondary"
      # ,"tertiary"
      )
  ) %>% 
  osmdata_sf() %>% 
  osm_lines(.$osm_lines$osm_id) %>% # which means using other type of geometry
  dplyr::select(geometry) %>%
  sf::st_transform(24892) %>% 
  sf::st_intersection(Lima_multipolygons) %>% # only highways that are in the city
  dplyr::filter(
    sf::st_is(., "LINESTRING")     # assure that only line geometry        
    )
```

```{r roads-plot}
#| label: roads-plot
#| echo: false
#| code-fold: show

ggplot() +
  #---The layer added later will come on top of the preceding layers---#
  geom_sf(data = Lima_multipolygons) +
  geom_sf(data = roads) +
  ggsn::blank()

```

<!-- ![Roads plot.](r`knitr::fig_chunk('Figs/roads-plot','png')`) -->

# Appendix:

<details>

<summary>

All code for this report

</summary>

```{r ref.label = knitr::all_labels()}
#| eval: false
```

</details>

<details>

<summary>

Reproducibility receipt

</summary>

```{r Reproducibility receipt}
      ## Datetime
      Sys.time()
  
      ## Repository
      git2r::repository()
  
      ## session info
      xfun::session_info()
      
```

</details>

<div class="watermark">DRAFT</div>
